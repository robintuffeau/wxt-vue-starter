---
description: Getting started with WXT - introduction, installation, and project structure
globs: 
alwaysApply: false
---
# Getting Started with WXT

WXT is a modern, open-source framework for building web extensions. Inspired by Nuxt, its goals are to:
- Provide an awesome developer experience
- Provide first-class support for all major browsers

## Prerequisites

Before using WXT, you should have:
- Basic understanding of how web extensions are structured
- Familiarity with how to access extension APIs
- If you're new to extension development, follow [Chrome's Hello World tutorial](mdc:https:/developer.chrome.com/docs/extensions/get-started/tutorial/hello-world) first

## Installation

### Bootstrapping a New Project (Recommended)

Run the `init` command and follow the instructions:

```bash
# Using PNPM (recommended)
pnpm dlx wxt@latest init

# Using NPM
npx wxt@latest init

# Using Yarn
yarn dlx wxt@latest init

# Using Bun
bunx wxt@latest init
```

Available starter templates:
- Vanilla TypeScript
- Vue
- React
- Svelte
- Solid

### Installing From Scratch

1. Create a new project:
```bash
mkdir my-extension
cd my-extension
pnpm init
```

2. Install WXT:
```bash
pnpm add -D wxt
```

3. Add an entrypoint, `entrypoints/background.ts`:
```typescript
export default defineBackground(() => {
  console.log('Hello world!');
});
```

4. Add scripts to your `package.json`:
```json
{
  "scripts": {
    "dev": "wxt",
    "dev:firefox": "wxt -b firefox",
    "build": "wxt build",
    "build:firefox": "wxt build -b firefox",
    "zip": "wxt zip",
    "zip:firefox": "wxt zip -b firefox",
    "postinstall": "wxt prepare"
  }
}
```

5. Run your extension in dev mode:
```bash
pnpm dev
```

## Project Structure

WXT follows a strict project structure. By default, it's a flat structure:

```
📂 {rootDir}/
   📁 .output/          # Build artifacts
   📁 .wxt/             # Generated by WXT, contains TS config
   📁 assets/           # CSS, images, and other assets processed by WXT
   📁 components/       # UI components (auto-imported by default)
   📁 composables/      # Composables for Vue (auto-imported)
   📁 entrypoints/      # Extension entrypoints (background, popup, content scripts)
   📁 hooks/            # Hooks for React and Solid (auto-imported)
   📁 modules/          # Local WXT Modules
   📁 public/           # Files copied as-is to output
   📁 utils/            # Utility functions (auto-imported)
   📄 .env              # Environment variables
   📄 .env.publish      # Environment variables for publishing
   📄 app.config.ts     # Runtime config
   📄 package.json      # Package manager config
   📄 tsconfig.json     # TypeScript config
   📄 web-ext.config.ts # Browser startup config
   📄 wxt.config.ts     # WXT main config file
```

### Using a `src/` Directory

Many developers prefer a `src/` directory to separate source code from configuration. Enable it in `wxt.config.ts`:

```typescript
export default defineConfig({
  srcDir: 'src',
});
```

This changes the structure to:

```
📂 {rootDir}/
   📁 .output/
   📁 .wxt/
   📁 modules/
   📁 public/
   📂 src/              # Source code moved here
      📁 assets/
      📁 components/
      📁 composables/
      📁 entrypoints/
      📁 hooks/
      📁 utils/
      📄 app.config.ts
   📄 .env
   📄 .env.publish
   📄 package.json
   📄 tsconfig.json
   📄 web-ext.config.ts
   📄 wxt.config.ts
```

### Customizing Directories

You can configure various directories in `wxt.config.ts`:

```typescript
export default defineConfig({
  // Relative to project root
  srcDir: "src",              // default: "."
  modulesDir: "wxt-modules",  // default: "modules"
  outDir: "dist",             // default: ".output"
  publicDir: "static",        // default: "public"

  // Relative to srcDir
  entrypointsDir: "entries",  // default: "entrypoints"
})
```

## Configuration Files

- `wxt.config.ts` - Main configuration file
- `web-ext.config.ts` - Configure browser startup during development
- `tsconfig.json` - TypeScript configuration
- `app.config.ts` - Runtime configuration
- `.env` - Environment variables 